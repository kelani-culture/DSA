complexity and Big O Notation

complexity of an algorithm is a measure of the amount of time and or space required by an algorithm for an input of a given size e.g N Unless otherwise stated the term complexity always refers to the worst case complexity complexity (i.e the highest possible time/space taken byt the prograam/algorithm to process an input)

in case of linear search:
the time complexity of an algorithm is cN for some fixed constant c that depends on the number of operations
cN = time complexity
N = is the size of the input 
the time complexity is proportionatte to the size of the input

The space complexity is some constant c' (independent of N) since we just neead a single variable position to iterate through the array and it occupies a constant space in the computer's memory (RAM)

Big O Notation: worst case complexity is often expressed using the Big O notation. in the Big O we drop fixed constants and lower powers of variables to capture the trend of relationship between the size of the input and the complexity of the algorithm i.e if the is
cN^3 + dN^2 + eN + f in the Big O notation is is expressed as O(N^3)
thus the time complexity of linear search is O(N) and its space complexity is O(1)
